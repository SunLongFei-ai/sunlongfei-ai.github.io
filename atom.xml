<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sunlongfei-ai.github.io</id>
    <title>一只小强强</title>
    <updated>2020-03-04T11:51:59.077Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sunlongfei-ai.github.io"/>
    <link rel="self" href="https://sunlongfei-ai.github.io/atom.xml"/>
    <subtitle>专注于各个奥利给</subtitle>
    <logo>https://sunlongfei-ai.github.io/images/avatar.png</logo>
    <icon>https://sunlongfei-ai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 一只小强强</rights>
    <entry>
        <title type="html"><![CDATA[一个翻译小件]]></title>
        <id>https://sunlongfei-ai.github.io/post/yi-ge-fan-yi-xiao-jian/</id>
        <link href="https://sunlongfei-ai.github.io/post/yi-ge-fan-yi-xiao-jian/">
        </link>
        <updated>2020-03-04T10:35:45.000Z</updated>
        <content type="html"><![CDATA[<p>写在开始的话🤝</p>
<p>这篇python写的请求主要是对现有的或者说对网上已经实现的api<br>
调用，或者说请求。<br>
用到的库也比较简单主要是requests库，，<br>
聚焦爬虫而已啦，尊重robots请求就看个人的意志啦！<br>
<img src="https://sunlongfei-ai.github.io/post-images/1583320050894.png" alt="" loading="lazy"></p>
<p>本篇主要是：<br>
requests  tkinter fake_useragent<br>
一个请求库 一个GUI库 另一个就当是一个反反爬库<br>
<img src="https://sunlongfei-ai.github.io/post-images/1583321411610.png" alt="" loading="lazy"></p>
<p>以下正文：<br>
<img src="https://sunlongfei-ai.github.io/post-images/1583321433370.png" alt="" loading="lazy"></p>
<p>网址：<br>
http://fanyi.youdao.com/<br>
先帖出请求网址或者说api<br>
url = 'http://fanyi.youdao.com/translate?smartresult=dictsmartresult=rule'<br>
以上网址可自主请求</p>
<p>不过以上网址是post请求</p>
<p>原来的网址又免不了js破解<br>
以大家，额不，以我比较懒惰的性格这种吃力不讨好的事情就算了<br>
什么js加密，有原来网址api接口干嘛不用<br>
<img src="https://sunlongfei-ai.github.io/post-images/1583321840908.png" alt="" loading="lazy"></p>
<p>那咱就先将data参数列举一下吧：<br>
data = {<br>
'i': content,<br>
'from': 'AUTO',<br>
'to': 'AUTO',<br>
'smartresult': 'dict',<br>
'client': 'fanyideskweb',</p>
<pre><code># 'salt': '15827948097626',
# 'sign': 'b9989465680493e466593f9539e05796',
# 'ts': '1582794809762',
# 'bv': '767d6b27f6caf88200654eb2a7b6e2eb',

'doctype': 'json',
'version': '2.1',
'keyfrom': 'fanyi.web',
'action': 'FY_BY_REALTlME'
}

    以上即为请求参数
</code></pre>
<p>那么翻译参数怎么传呢？<br>
#获取输入的内容<br>
content = entry.get()<br>
#去空格 split是切割<br>
content = content.strip()</p>
<pre><code>#先解释一下entry吧 就是一个列表框
从里面获取文字，毕竟是用户输入，交互式界面嘛

req['translateResult'][0][0]['tgt']
以上用来获取网页返回的翻译参数
</code></pre>
<p>好了，请求网页参数的代码就这样了，好像是比较简单的嘛</p>
<p>什么js加密，还没api接口来的快嘛！</p>
<p>接下来就谈谈tkinter界面问题吧</p>
<pre><code># 创建窗口
window = Tk()
#窗口大小
window.geometry('820x600')
#窗口标题
window.title('我的翻译软件')
#控件
label = Label(window,text = '输入要翻译的文字：',font=('幼圆',20),fg = 'LightSeaGreen')
#位置 网格式的布局  grid  pack 包  place位置
label.place(x=0, y=0)

label1 = Label(window,text = '翻译后的结果为：',font=('幼圆',20),fg = 'LightSeaGreen')
#位置 网格式的布局  grid  pack 包  place位置
label1.place(x=0, y=250)
#输入框
entry = Entry(window,font = ('幼圆',15))
#修改位置 row为行 column为列
entry.place(x=20,y = 45,heigh = 200,width=770)
# entry.place(width=600, height=350)


#输出框
res = StringVar()
entry1 = Entry(window,font = ('幼圆',15),textvariable = res,width=600)
#修改位置 row为行 column为列
entry1.place(x=20,y = 300,heigh = 200,width=770)
# entry1.place(width=150, height=50)


#按钮
button = Button(window,text = '翻译',font=('幼圆',12),width = 25,height = 2,fg = 'DimGray',command = translation)
button.place(x=0, y=600,anchor='sw')
button1 = Button(window,text = '退出',font=('幼圆',12),width = 25,height = 2,fg = 'DimGray',command = window.quit)
button1.place(x=820, y=600,anchor='se')
#显示窗口
window.mainloop()
</code></pre>
<p>具体解释就看注释啦！</p>
<p>最最后贴一下完整代码吧！！！！<br>
<img src="https://sunlongfei-ai.github.io/post-images/1583322388921.png" alt="" loading="lazy"></p>
<pre><code>#-*- coding: utf-8 -*-

from tkinter import *
from tkinter import messagebox
import requests
def translation():
    &quot;&quot;&quot;
    翻译
    :return:
    &quot;&quot;&quot;
    #获取输入的内容
    content = entry.get()
    #去空格 split是切割
    content = content.strip()
    if content == '':
        messagebox.showinfo('提示',message = '请输入要翻译的内容')
    else:
        url = 'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'
        data = {
            'i': content,
            'from': 'AUTO',
            'to': 'AUTO',
            'smartresult': 'dict',
            'client': 'fanyideskweb',

            # 'salt': '15827948097626',
            # 'sign': 'b9989465680493e466593f9539e05796',
            # 'ts': '1582794809762',
            # 'bv': '767d6b27f6caf88200654eb2a7b6e2eb',

            'doctype': 'json',
            'version': '2.1',
            'keyfrom': 'fanyi.web',
            'action': 'FY_BY_REALTlME'
        }
        req = requests.post(url,data = data).json()
        tran = req['translateResult'][0][0]['tgt']
        # print(tran)
        res.set(tran)
        return tran


# 创建窗口
window = Tk()
#窗口大小
window.geometry('820x600')
#窗口标题
window.title('我的翻译软件')
#控件
label = Label(window,text = '输入要翻译的文字：',font=('幼圆',20),fg = 'LightSeaGreen')
#位置 网格式的布局  grid  pack 包  place位置
label.place(x=0, y=0)

label1 = Label(window,text = '翻译后的结果为：',font=('幼圆',20),fg = 'LightSeaGreen')
#位置 网格式的布局  grid  pack 包  place位置
label1.place(x=0, y=250)
#输入框
entry = Entry(window,font = ('幼圆',15))
#修改位置 row为行 column为列
entry.place(x=20,y = 45,heigh = 200,width=770)
# entry.place(width=600, height=350)


#输出框
res = StringVar()
entry1 = Entry(window,font = ('幼圆',15),textvariable = res,width=600)
#修改位置 row为行 column为列
entry1.place(x=20,y = 300,heigh = 200,width=770)
# entry1.place(width=150, height=50)


#按钮
button = Button(window,text = '翻译',font=('幼圆',12),width = 25,height = 2,fg = 'DimGray',command = translation)
button.place(x=0, y=600,anchor='sw')
button1 = Button(window,text = '退出',font=('幼圆',12),width = 25,height = 2,fg = 'DimGray',command = window.quit)
button1.place(x=820, y=600,anchor='se')
#显示窗口
window.mainloop()
</code></pre>
<p>是比较简单的啊，就是界面不太擅长诶！！！！</p>
]]></content>
    </entry>
</feed>